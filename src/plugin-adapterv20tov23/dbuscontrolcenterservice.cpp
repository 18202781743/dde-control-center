/*
 * Copyright (C) 2015 ~ 2018 Deepin Technology Co., Ltd.
 *
 * Author:     sbw <sbw@sbw.so>
 *             kirigaya <kirigaya@mkacg.com>
 *             Hualet <mr.asianwang@gmail.com>
 *             listenerri <listenerri@gmail.com>
 *
 * Maintainer: sbw <sbw@sbw.so>
 *             kirigaya <kirigaya@mkacg.com>
 *             Hualet <mr.asianwang@gmail.com>
 *             listenerri <listenerri@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp dde-center -a dbuscontrolcenter -c DBusControlCenter -l Frame
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "dbuscontrolcenterservice.h"
#include "ddbussender.h"
#include "adapterv20tov23plugin.h"

/*
 * Implementation of adaptor class DBusControlCenter
 */
DBusControlCenterService::DBusControlCenterService(AdapterV20toV23Root *parent)
    : QDBusAbstractAdaptor(parent)
    , m_adapter(parent)
{
}

DBusControlCenterService::~DBusControlCenterService()
{
}

void DBusControlCenterService::exitProc()
{
    DDBusSender()
        .service("org.deepin.dde.ControlCenter")
        .interface("org.deepin.dde.ControlCenter")
        .path("/org/deepin/dde/ControlCenter")
        .method("Exit")
        .call();
}

void DBusControlCenterService::Hide()
{
    DDBusSender()
        .service("org.deepin.dde.ControlCenter")
        .interface("org.deepin.dde.ControlCenter")
        .path("/org/deepin/dde/ControlCenter")
        .method("Hide")
        .call();
}

void DBusControlCenterService::Show()
{
    DDBusSender()
        .service("org.deepin.dde.ControlCenter")
        .interface("org.deepin.dde.ControlCenter")
        .path("/org/deepin/dde/ControlCenter")
        .method("Show")
        .call();
}

void DBusControlCenterService::ShowHome()
{
    DDBusSender()
        .service("org.deepin.dde.ControlCenter")
        .interface("org.deepin.dde.ControlCenter")
        .path("/org/deepin/dde/ControlCenter")
        .method("ShowHome")
        .call();
}

void DBusControlCenterService::ShowModule(const QString &module)
{
    ShowPage(module, "");
}

void DBusControlCenterService::ShowPage(const QString &url)
{
    DDBusSender()
        .service("org.deepin.dde.ControlCenter")
        .interface("org.deepin.dde.ControlCenter")
        .path("/org/deepin/dde/ControlCenter")
        .method("ShowPage")
        .arg(url)
        .call();
    delayShowPage(url);
}

void DBusControlCenterService::ShowPage(const QString &module, const QString &page)
{
    auto url = module.toLower();
    if (!page.isEmpty())
        url += "/" + page;
    ShowPage(url);
}

void DBusControlCenterService::Toggle()
{
    DDBusSender()
        .service("org.deepin.dde.ControlCenter")
        .interface("org.deepin.dde.ControlCenter")
        .path("/org/deepin/dde/ControlCenter")
        .method("Toggle")
        .call();
}
// 先显示，加载完成后再跳转
void DBusControlCenterService::delayShowPage(const QString &url)
{
    DCC_NAMESPACE::ModuleObject *parent = m_adapter->moduleRoot();
    if (parent) {
        QStringList names = url.split('/', Qt::SkipEmptyParts);
        DCC_NAMESPACE::ModuleObject *obj = parent;
        while (!names.isEmpty() && obj) {
            const QString &name = names.takeFirst();
            parent = obj;
            obj = nullptr;
            for (auto &&child : parent->childrens()) {
                if (0 == name.compare(child->name(), Qt::CaseInsensitive)) {
                    obj = child;
                    if (names.isEmpty()) {
                        obj->trigger();
                        return;
                    }
                    break;
                }
            }
        }
    }
    if (m_adapter->loadFinished())
        return;
    QTimer::singleShot(50, this, [this, url] {
        delayShowPage(url);
    });
}
